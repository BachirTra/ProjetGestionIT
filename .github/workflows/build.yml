name: Build-Analyze-Deliver-Deploy

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main

jobs:
  build_and_analyze_pr:
    name: Build and Analyze (Pull Request)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Dependencies Scan
        run: mvn clean verify -DskipTests -Pcve

      - name: Unit Testing
        run: mvn test -Put

      - name: Integration Testing
        run: mvn test -Pit

      - name: Quality Gate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=BachirTra_ProjetGestionIT

      - name: Check Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=BachirTra_ProjetGestionIT \
            -Dsonar.organization=bachirtra \
            -Dsonar.host.url=https://sonarcloud.io
          echo "Quality Gate status: $(curl -s -u ${SONAR_TOKEN}: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=BachirTra_ProjetGestionIT" | jq -r '.projectStatus.status')"

      - name: Package
        run: mvn -B package -DskipTests=true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          tags: bachirtra/gestionprojetit:pr-${{ github.event.pull_request.number }}

  build_and_deploy_main:
    name: Build, Analyze, Deliver, and Deploy (Main Branch)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Dependencies Scan
        run: mvn clean verify -DskipTests -Pcve

      - name: Unit Testing
        run: mvn test -Put

      - name: Integration Testing
        run: mvn test -Pit

      - name: Quality Gate
        run: mvn clean verify sonar:sonar -Dsonar.organization=bachirtra -Dsonar.host.url=https://sonarcloud.io -Dsonar.token=${{ secrets.SONAR_TOKEN }} -Dsonar.projectKey=BachirTra_ProjetGestionIT
      - name: Check Quality Gate
        run: |
          echo "Checking quality gate status..."
          response=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: https://sonarcloud.io/api/qualitygates/project_status?projectKey=BachirTra_ProjetGestionIT)
          status=$(echo $response | jq -r '.projectStatus.status')
          reliability=$(echo $response | jq -r '.projectStatus.conditions[] | select(.metricKey=="reliability_rating").status')
          security=$(echo $response | jq -r '.projectStatus.conditions[] | select(.metricKey=="security_rating").status')
          maintainability=$(echo $response | jq -r '.projectStatus.conditions[] | select(.metricKey=="sqale_rating").status')
          coverage=$(echo $response | jq -r '.projectStatus.conditions[] | select(.metricKey=="coverage").value')
          duplications=$(echo $response | jq -r '.projectStatus.conditions[] | select(.metricKey=="duplicated_lines_density").value')
          bugs=$(echo $response | jq -r '.projectStatus.conditions[] | select(.metricKey=="bugs").value')
          vulnerabilities=$(echo $response | jq -r '.projectStatus.conditions[] | select(.metricKey=="vulnerabilities").value')
          blockers=$(echo $response | jq -r '.projectStatus.conditions[] | select(.metricKey=="blocker_violations").value')
          criticals=$(echo $response | jq -r '.projectStatus.conditions[] | select(.metricKey=="critical_violations").value')
          majors=$(echo $response | jq -r '.projectStatus.conditions[] | select(.metricKey=="major_violations").value')

          echo "Quality Gate status: $status"
          echo "Reliability: $reliability"
          echo "Security: $security"
          echo "Maintainability: $maintainability"
          echo "Coverage: $coverage"
          echo "Duplications: $duplications"
          echo "Bugs: $bugs"
          echo "Vulnerabilities: $vulnerabilities"
          echo "Blockers: $blockers"
          echo "Criticals: $criticals"
          echo "Majors: $majors"

          if [ "$status" != "OK" ] || [ "$reliability" != "OK" ] || [ "$security" != "OK" ] || [ "$maintainability" != "OK" ] || [ $(echo "$coverage < 95" | bc) -eq 1 ] || [ $(echo "$duplications >= 1" | bc) -eq 1 ] || [ "$bugs" != "0" ] || [ "$vulnerabilities" != "0" ] || [ "$blockers" != "0" ] || [ "$criticals" != "0" ] || [ "$majors" != "0" ]; then
            echo "Quality Gate conditions not met!"
            exit 1
          fi

      - name: Package
        run: mvn -B package -DskipTests=true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          tags: bachirtra/gestionprojetit:pr-${{ github.event.pull_request.number }}

      - name: Wait for deploy to finish
        run: sleep 30

      

       
