name: Build-Analyze-Deliver-Deploy
on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Dependencies Scan
        #if: 1>2
        run: mvn clean verify -DskipTests -Pcve

      - name: Unit Testing
        run: mvn test -Put

      - name: Integration Testing
        run: mvn test -Pit

      - name: Quality Gate
        run: mvn clean verify sonar:sonar -Dsonar.organization=ept-git -Dsonar.host.url=https://sonarcloud.io -Dsonar.token=${{ secrets.SONAR_TOKEN }} -Dsonar.projectKey=seenibu_poc-todos

      - name: Check Quality Gate
        run: |
          echo "Checking quality gate status..."
          response=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: https://sonarcloud.io/api/qualitygates/project_status?projectKey=seenibu_poc-todos)
          status=$(echo $response | jq -r '.projectStatus.status')
          echo "Quality Gate status: $status"
          if [ "$status" != "OK" ]; then
            echo "Quality Gate failed!"
            exit 1
          fi

      - name: Package
        run: mvn -B package -DskipTests=true

      - name: Login to Docker
        run: |
          docker login -u=${{ secrets.DOCKER_USERNAME }} -p=${{ secrets.DOCKER_TOKEN }} docker.io

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REGISTRY_IMAGE }}:${{ github.sha }} -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REGISTRY_IMAGE }}:latest .

      - name: Publish Docker image versions
        run: |
          docker push --all-tags ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REGISTRY_IMAGE }}

      - name: Deploy to Dev
        run: |
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.SSH_PRIVATE_KEY }} ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} -p ${{ secrets.REMOTE_PORT }} << 'EOF'
            docker login -u=${{ secrets.DOCKER_USERNAME }} -p=${{ secrets.DOCKER_TOKEN }} docker.io
            docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REGISTRY_IMAGE }}:latest
            docker stop my_todo_app || true
            docker rm my_todo_app || true
            docker run -d --name my_todo_app -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REGISTRY_IMAGE }}:latest
          EOF

      - name: Wait for deploy to finish
        run: sleep 30

      - name: Check deploy
        run: |
          response=$(curl -s http://${{ secrets.REMOTE_HOST }}:8080/cicd/_health)
          echo "Health check response: $response"
          if [[ "$response" != *"Welcome to my Todo app"* ]]; then
            echo "Deployment failed!"
            exit 1
          fi
